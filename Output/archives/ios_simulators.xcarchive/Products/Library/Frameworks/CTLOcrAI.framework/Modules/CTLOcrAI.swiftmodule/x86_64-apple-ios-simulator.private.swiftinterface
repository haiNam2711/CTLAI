// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CTLOcrAI
import Alamofire
@_exported import CTLOcrAI
import Foundation
import KeychainSwift
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class CTLOcrCmtResponse : Swift.Decodable {
  public var code: Swift.Int
  public var message: Swift.String
  public var status: Swift.Int
  public var data: CTLOcrAI.CTLOcrCmtData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrCmtData : Swift.Decodable {
  public var results: [CTLOcrAI.CTLOcrCmtResult]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrCmtResult : Swift.Decodable {
  public var key: Swift.String
  public var value: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class CTLOcrService : CTLOcrAI.CTLOcrBaseService {
  public init()
  public func getCmtInfo(link: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrCmtResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func getCmtInfo(image: UIKit.UIImage, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrCmtResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func getBhytInfo(link: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrBhytResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func getBhytInfo(image: UIKit.UIImage, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrBhytResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  @objc deinit
}
public class CTLOcrS2TResponse : Swift.Decodable {
  public var message: Swift.String
  public var code: Swift.Int
  public var status: Swift.Int
  public var data: CTLOcrAI.CTLOcrData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrData : Swift.Decodable {
  public var modelVersion: Swift.String
  public var result: CTLOcrAI.CTLOcrResult
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrResult : Swift.Decodable {
  public var duration: Swift.String
  public var inferTime: Swift.String
  public var text: [CTLOcrAI.CTLOcrText]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrText : Swift.Decodable {
  public var start: Swift.String
  public var text: Swift.String
  public var returnSegment: [CTLOcrAI.CTLOcrISegment] {
    get
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum CTLOcrSeg : Swift.Decodable {
  case index(Swift.Double)
  case iText(Swift.String)
  public init(from decoder: any Swift.Decoder) throws
}
public struct CTLOcrISegment {
  public var start: Swift.Double
  public var stop: Swift.Double
  public var text: Swift.String
}
public class CTLOcrShowCheckinResponse : Swift.Decodable {
  public var status: Swift.Int
  public var code: Swift.Int
  public var message: Swift.String
  public var data: [CTLOcrAI.CTLOcrInfoResponse]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrFilterCheckinResponse : Swift.Decodable {
  public var status: Swift.Int
  public var code: Swift.Int
  public var message: Swift.String
  public var total: Swift.Int
  public var data: [CTLOcrAI.CTLOcrInfoResponse]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrInfoResponse : Swift.Decodable {
  public var checkinTime: Swift.String
  public var email: Swift.String
  public var employeeCode: Swift.String
  public var link: Swift.String
  public var name: Swift.String
  public var probability: Swift.String
  public var imageID: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrGetUserResponse : Swift.Decodable {
  public var status: Swift.Int
  public var code: Swift.Int
  public var message: Swift.String
  public var data: CTLOcrAI.CTLOcrUserInfoResponse
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrUserInfoResponse : Swift.Decodable {
  public var employeeCode: Swift.String
  public var name: Swift.String
  public var email: Swift.String
  public var registeredMask: Swift.Int
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrLoginService {
  public init()
  public func logIn(email: Swift.String, password: Swift.String, expire: Swift.Int = 1, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrLoginResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  @objc deinit
}
public enum CTLOcrUseCase {
  case cmtGet
  case cmtPost
  case bhytGet
  case bhytPost
  public static func == (a: CTLOcrAI.CTLOcrUseCase, b: CTLOcrAI.CTLOcrUseCase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CTLOcrAPIClient {
  public func call<T>(_ method: Alamofire.HTTPMethod, path: Swift.String, headers: Alamofire.HTTPHeaders? = nil, params: [Swift.String : Any], notUseSnakeDecoder: Swift.Bool = false, returnType: T.Type, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  public func call<T>(_ method: Alamofire.HTTPMethod, path: Swift.String, headers: Alamofire.HTTPHeaders? = nil, multipartFD: Alamofire.MultipartFormData, notUseSnakeDecoder: Swift.Bool = false, returnType: T.Type, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
public enum CTLOcrFaceDetectUseCase {
  case registerFace
  case predictFace
  case showCheckin
  case filterCheckin
  case getInfo
  case updateInfo
  case fasPredict
  case compareFace
  public static func == (a: CTLOcrAI.CTLOcrFaceDetectUseCase, b: CTLOcrAI.CTLOcrFaceDetectUseCase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CTLOcrBaseService {
  @objc deinit
}
extension Foundation.Date {
  public init(loginResponseString: Swift.String)
}
public class CTLOcrCompareResponse : Swift.Decodable {
  public var status: Swift.Int
  public var code: Swift.Int
  public var message: Swift.String
  public var data: CTLOcrAI.CTLOcrCompareData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrCompareData : Swift.Decodable {
  public var similarity: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum CTLOcrAPIError : Swift.Error {
  case serverSideError([Swift.String : Swift.String])
  case clientSideError(Swift.String)
}
public class CTLOcrLoginResponse : Swift.Decodable {
  public var code: Swift.Int
  public var status: Swift.Int
  public var data: CTLOcrAI.CTLOcrLoginDataResponse?
  public var finalMessage: [Swift.String : Swift.String] {
    get
    set
  }
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrLoginDataResponse : Swift.Decodable {
  public var expireData: Swift.String
  public var jwtToken: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum CTLOcrMessage : Swift.Decodable {
  case string(Swift.String)
  case dictionary([Swift.String : Swift.String])
  public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrBhytResponse : Swift.Decodable {
  public var data: CTLOcrAI.CTLOcrBhytData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrBhytData : Swift.Decodable {
  public var results: [CTLOcrAI.CTLOcrBhytResult]
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrBhytResult : Swift.Decodable {
  public var key: Swift.String
  public var value: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrBaseResponse : Swift.Decodable {
  public var message: Swift.String
  public var code: Swift.Int
  public var status: Swift.Int
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class CTLOcrSpeechService : CTLOcrAI.CTLOcrBaseService {
  public init()
  public func speechToText(from file: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrS2TResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func speechToText(from localURL: Foundation.URL, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrS2TResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func textToSpeech(from file: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrT2SResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  @objc deinit
}
public class CTLOcrT2SResponse : Swift.Decodable {
  public var status: Swift.Int
  public var code: Swift.Int
  public var message: Swift.String
  public var data: CTLOcrAI.CTLOcrT2SData
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class CTLOcrT2SData : Swift.Decodable {
  public var filePath: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class CTLOcrFDService : CTLOcrAI.CTLOcrBaseService {
  public init()
  public func registerFace(_ faceImage: UIKit.UIImage, name: Swift.String, email: Swift.String, employeeCode: Swift.Int, isFaceMasked: Swift.Int, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrLoginResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func getCheckinHistory(numberRecord: Swift.Int, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrShowCheckinResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func filterCheckinHistory(employeeCode: Swift.Int, fromDate: Swift.Int, toDate: Swift.Int, listEmail: [Swift.String], check: Swift.Int, page: Swift.Int, limit: Swift.Int, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrFilterCheckinResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func getUserInfo(email: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrGetUserResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func changeUserInfo(email: Swift.String, employeeCode: Swift.Int, name: Swift.String, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrBaseResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func predictFake(_ image: UIKit.UIImage, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrBaseResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  public func compareFaces(image1: UIKit.UIImage, image2: UIKit.UIImage, completionHandler: @escaping (Swift.Result<CTLOcrAI.CTLOcrCompareResponse, CTLOcrAI.CTLOcrAPIError>) -> Swift.Void)
  @objc deinit
}
public enum CTLOcrSpeechUseCase {
  case speechToText
  case textToSpeech
  case speechNormalization
  public static func == (a: CTLOcrAI.CTLOcrSpeechUseCase, b: CTLOcrAI.CTLOcrSpeechUseCase) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CTLOcrAI.CTLOcrUseCase : Swift.Equatable {}
extension CTLOcrAI.CTLOcrUseCase : Swift.Hashable {}
extension CTLOcrAI.CTLOcrFaceDetectUseCase : Swift.Equatable {}
extension CTLOcrAI.CTLOcrFaceDetectUseCase : Swift.Hashable {}
extension CTLOcrAI.CTLOcrSpeechUseCase : Swift.Equatable {}
extension CTLOcrAI.CTLOcrSpeechUseCase : Swift.Hashable {}
